const API_KEY = "YeqBjBJJA6AHrNTulASeIIgtY2AqloOS";
const FORECAST_HOURS = 24;
const ALTITUDES = [10, 100, 200, 500];


function weatherIconToEmoji(icon) {
  switch (icon) {
    case "clear-day": return "‚òÄÔ∏è";
    case "clear-night": return "üåô";
    case "rain": return "üåßÔ∏è";
    case "snow": return "‚ùÑÔ∏è";
    case "sleet": return "üå®Ô∏è";
    case "wind": return "üí®";
    case "fog": return "üå´Ô∏è";
    case "cloudy": return "‚òÅÔ∏è";
    case "partly-cloudy-day": return "‚õÖ";
    case "partly-cloudy-night": return "üå•Ô∏è";
    case "hail": return "üå®Ô∏è";
    case "thunderstorm": return "üå©Ô∏è";
    default: return "";
  }
}

function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu("–ü–æ–≥–æ–¥–∞")
    .addItem("–û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –¥–ª—è —Ü—å–æ–≥–æ –ª–∏—Å—Ç–∞", "updateWeatherForActiveSheet")
    .addToUi();
}

function updateWeatherForActiveSheet() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const lat = parseFloat(sheet.getRange("A1").getValue());
  const lon = parseFloat(sheet.getRange("B1").getValue());
  if (isNaN(lat) || isNaN(lon)) {
    SpreadsheetApp.getUi().alert("–í–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ –∫–æ–º—ñ—Ä–∫–∏ A1 (LAT), B1 (LON)!");
    return;
  }
  updateWeatherReportForSheet(sheet, lat, lon);
}

function updateWeatherForAllSheets() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheets = ss.getSheets();

  for (const sheet of sheets) {
    const lat = parseFloat(sheet.getRange("A1").getValue());
    const lon = parseFloat(sheet.getRange("B1").getValue());
    if (isNaN(lat) || isNaN(lon)) {
      sheet.appendRow(["ERROR: –í–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ –∫–æ–º—ñ—Ä–∫–∏ A1 (LAT), B1 (LON)"]);
      continue;
    }
    updateWeatherReportForSheet(sheet, lat, lon);
    SpreadsheetApp.flush();
  }
}

function updateWeatherReportForSheet(sheet, LAT, LON) {
  try {
    Logger.log(`Start update for ${sheet.getName()} coords: ${LAT}, ${LON}`);

    const url = "https://www.uavforecast.com/api/v1/forecast";
    const payload = {
      lat: LAT,
      lon: LON,
      forecast_hours: FORECAST_HOURS,
      wind_altitudes_m: ALTITUDES,
      gps_elevation_mask: 5,
      include_gps: true,
      include_glonass: true,
      include_galileo: true,
      include_beidou: true
    };

    const options = {
      method: "POST",
      contentType: "application/json",
      payload: JSON.stringify(payload),
      headers: {
        Authorization: "Bearer " + API_KEY
      },
      muteHttpExceptions: true
    };

    const response = UrlFetchApp.fetch(url, options);

    if (response.getResponseCode() != 200) {
      sheet.appendRow(["API ERROR", response.getContentText()]);
      return;
    }

    const data = JSON.parse(response.getContentText());

    appendCurrentConditionsBlock(data.current, sheet);

    if (!data.days || !Array.isArray(data.days) || data.days.length === 0) {
      sheet.appendRow(["BUG REPORT", "–í –æ—Ç–≤–µ—Ç–µ API –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'days' –∏–ª–∏ –æ–Ω–æ –ø—É—Å—Ç–æ–µ."]);
      return;
    }

    for (let day of data.days) {
      if (!day.rows || day.rows.length === 0 || !day.rows.some(r => r && r.time && r.time.local)) continue;
      const weekDayName = getUkrWeekday(day.date);
      const sunrise = day.sunrise ? formatTime(day.sunrise.local) : "-";
      const solarNoon = day.solar_noon ? formatTime(day.solar_noon.local) : "-";
      const sunset = day.sunset ? formatTime(day.sunset.local) : "-";
      const header = `${weekDayName} ${day.date}: –°—Ö—ñ–¥ ${sunrise}, —Å–æ–Ω—è—á–Ω–∏–π –ø–æ–ª—É–¥–µ–Ω—å ${solarNoon}, –ó–∞—Ö—ñ–¥ ${sunset}`;
      sheet.appendRow([header]);
      sheet.appendRow([
        "–ß–∞—Å", "–í—ñ—Ç–µ—Ä", "–ü–æ—Ä–∏–≤–∏", "–ú–∞–∫—Å. –≤–∏—Å–æ—Ç–∞", "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–í–æ–ª–æ–≥—ñ—Å—Ç—å",
        "–í—ñ—Ä–æ–≥—ñ–¥–Ω—ñ—Å—Ç—å –æ–ø–∞–¥—ñ–≤", "–û–ø–∞–¥–∏", "–•–º–∞—Ä–Ω—ñ—Å—Ç—å", "–ë–∞–∑–∞ —Ö–º–∞—Ä", "–í–∏–¥–∏–º—ñ—Å—Ç—å",
        "–í–∏–¥–∏–º—ñ —Å—É–ø—É—Ç–Ω.", "–ö—Ä-—ñ–Ω–¥–µ–∫—Å", "–û—Ü—ñ–Ω–∫–∞ —Å—É–ø—É—Ç–Ω. –ø—Ä–∏–±–ª.", "–ú–æ–∂–Ω–∞ –ª—ñ—Ç–∞—Ç–∏?", "–ü–æ–≥–æ–¥–∞"
      ]);
      for (let h = 0; h < 24; h++) {
        let hourStr = (h < 10 ? "0" : "") + h + ":00";
        let row = (day.rows || []).find(r => {
          if (!r.time || !r.time.local) return false;
          const d = new Date(r.time.local);
          return d.getHours() === h;
        });
        if (row) {
          const surfaceWind = row.wind_profile && row.wind_profile.length > 0 ? row.wind_profile[0] : {};
          const sat = row.sats && row.sats.gps ? row.sats.gps.count : "-";
          const kp = row.kp != undefined ? row.kp.toFixed(2) : "-";
          const estimate = estimateSatellites(row);
          sheet.appendRow([
            hourStr,
            formatWind(surfaceWind.wind_speed_ms, surfaceWind.wind_bearing_deg),
            formatWind(surfaceWind.gust_speed_ms, surfaceWind.gust_bearing_deg),
            "1 500+ –º",
            formatTemp(row.temp_c),
            formatTemp(row.humidity_pct),
            percentOrDash(row.precip_prob_pct),
            row.precip_intensity_mmh ? row.precip_intensity_mmh + " –º–º/–≥" : "-",
            percentOrDash(row.cloud_cover_pct),
            row.cloudbase_m ? Math.round(row.cloudbase_m) + " –º" : "-",
            row.visibility_m ? Math.round(row.visibility_m/1000) + " –∫–º" : "-",
            sat,
            kp,
            estimate,
            "—Ç–∞–∫",
            weatherIconToEmoji(row.weather_icon) 
          ]);
        } else {
          sheet.appendRow([
            hourStr, "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-", "-"
          ]);
        }
      }
      sheet.appendRow([""]);
    }

    Logger.log("=== End updateWeatherReport for " + sheet.getName() + " ===");

  } catch (err) {
    sheet.appendRow(["CRITICAL ERROR", String(err)]);
  }
}
function appendCurrentConditionsBlock(current, sheet) {
  sheet.appendRow(["–ü–æ—Ç–æ—á–Ω—ñ —É–º–æ–≤–∏ —Å—Ç–∞–Ω–æ–º: " + formatTime(current.time.local)]);
  sheet.appendRow([
    "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "–í–æ–ª–æ–≥—ñ—Å—Ç—å", "–•–º–∞—Ä–Ω—ñ—Å—Ç—å", "–ë–∞–∑–∞ —Ö–º–∞—Ä", "–¢–∏—Å–∫", "–©—ñ–ª—å–Ω—ñ—Å—Ç—å –≤–∏—Å–æ—Ç–∏",
    "–í—ñ—Ç–µ—Ä", "–ü–æ—Ä–∏–≤–∏", "–í–∏–¥–∏–º—ñ—Å—Ç—å", "–ü–æ–≥–æ–¥–∞", "GPS", "GLONASS", "Galileo", "Beidou", "Kp-—ñ–Ω–¥–µ–∫—Å", "–ü–æ–≥–æ–¥–∞"
  ]);
  const surfaceWind = current.wind_profile && current.wind_profile.length > 0 ? current.wind_profile[0] : {};
  sheet.appendRow([
    formatTemp(current.temp_c),
    formatTemp(current.humidity_pct),
    percentOrDash(current.cloud_cover_pct),
    current.cloudbase_m ? Math.round(current.cloudbase_m) + " –º" : "-",
    current.pressure_msl_hpa ? Math.round(current.pressure_msl_hpa) + " –≥–ü–∞" : "-",
    current.density_altitude_m ? Math.round(current.density_altitude_m) + " –º" : "-",
    formatWind(surfaceWind.wind_speed_ms, surfaceWind.wind_bearing_deg),
    formatWind(surfaceWind.gust_speed_ms, surfaceWind.gust_bearing_deg),
    current.visibility_m ? Math.round(current.visibility_m/1000) + " –∫–º" : "-",
    current.weather_icon || "-",
    current.sats && current.sats.gps && current.sats.gps.count !== undefined ? current.sats.gps.count : "-",
    current.sats && current.sats.glonass && current.sats.glonass.count !== undefined ? current.sats.glonass.count : "-",
    current.sats && current.sats.galileo && current.sats.galileo.count !== undefined ? current.sats.galileo.count : "-",
    current.sats && current.sats.beidou && current.sats.beidou.count !== undefined ? current.sats.beidou.count : "-",
    current.kp != undefined ? current.kp.toFixed(2) : "-",
    weatherIconToEmoji(current.weather_icon) 
  ]);
  sheet.appendRow([""]);
}

function estimateSatellites(row) {
  const sat = row.sats && row.sats.gps && row.sats.gps.count ? +row.sats.gps.count : 0;
  const kp = row.kp != undefined ? +row.kp : 1.0;
  return sat && kp ? (sat * kp).toFixed(1) : "-";
}

function getUkrWeekday(date) {
  if (!(date instanceof Date)) date = new Date(date);
  if (isNaN(date.getTime())) return "-";
  const days = ["–ù–µ–¥—ñ–ª—è", "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü º—è—Ç–Ω–∏—Ü—è", "–°—É–±–æ—Ç–∞"];
  return days[date.getDay()];
}


function formatTime(localStr) {
  const d = new Date(localStr);
  if (isNaN(d.getTime())) return "-";
  return Utilities.formatDate(d, Session.getScriptTimeZone(), "HH:mm");
}

function formatWind(speed, bearing) {
  if (speed == null) return "-";
  const dirs = ["‚Üë","‚Üó","‚Üí","‚Üò","‚Üì","‚Üô","‚Üê","‚Üñ"];
  let dir = "-";
  if (bearing != null) dir = dirs[Math.round(((bearing % 360) / 45)) % 8];
  return Math.round(speed) + " –º/—Å" + dir;
}
function formatTemp(val) {
  return val != null ? Math.round(val) + "¬∞C" : "-";
}
function percentOrDash(val) {
  return val != null ? Math.round(val) + "%" : "-";
}
